generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                   String               @id @default(cuid())
  clerkUserId          String?              @map("clerk_user_id")
  quantity             Int
  totalAmount          Int
  stripeSessionId      String?              @map("stripe_session_id")
  stripeCustomerId     String?              @map("stripe_customer_id")
  stripeSubscriptionId String?              @map("stripe_subscription_id")
  subscriptionStatus   String               @default("active") @map("subscription_status")
  cancelledAt          DateTime?            @map("cancelled_at")
  cancellationReason   String?              @map("cancellation_reason")
  businessName         String?              @map("business_name")
  externalId           String?              @unique @map("external_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  productType          ProductType          @map("product_type")
  status               OrderStatus          @default(PENDING)
  active_inbox_count   Int                  @default(0)
  next_billing_date    DateTime?
  original_quantity    Int?
  stripe_invoice_id    String?
  billing_events       billing_events[]
  domains              Domain[]
  inboxes              Inbox[]
  notifications        notifications[]
  onboardingData       OnboardingData?
  pendingInvites       PendingOrderInvite[]

  @@index([clerkUserId])
  @@index([status])
  @@index([productType])
  @@index([createdAt])
  @@index([stripeSessionId])
  @@map("orders")
}

model OnboardingData {
  id                    String       @id @default(uuid())
  orderId               String       @unique
  clerkUserId           String
  businessType          String?
  industry              String?
  companySize           String?
  website               String?
  domainPreferences     Json?
  personas              Json?
  espProvider           String?
  specialRequirements   String?
  stepCompleted         Int          @default(0)
  isCompleted           Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  domainSource          String       @default("OWN") @map("domain_source")
  inboxesPerDomain      Int          @default(3) @map("inboxes_per_domain")
  providedDomains       String[]     @default([]) @map("provided_domains")
  calculatedDomainCount Int?         @map("calculated_domain_count")
  domainRegistrar       String?      @map("domain_registrar")
  registrarAdminEmail   String?      @map("registrar_admin_email")
  registrarUsername     String?      @map("registrar_username")
  registrarPassword     String?      @map("registrar_password")
  productType           ProductType? @map("product_type")
  order                 Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("onboarding_data")
}

model Inbox {
  id               String      @id @default(cuid())
  orderId          String      @map("order_id")
  email            String      @unique
  firstName        String?     @map("first_name")
  lastName         String?     @map("last_name")
  espPlatform      String      @map("esp_platform")
  tags             String[]    @default([])
  businessName     String?     @map("business_name")
  forwardingDomain String?     @map("forwarding_domain")
  password         String?     @map("password")
  fulfilledAt      DateTime?   @map("fulfilled_at")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  personaName      String?     @map("persona_name")
  status           InboxStatus @default(PENDING)
  cancel_reason    String?
  cancelled_at     DateTime?
  is_active        Boolean     @default(true)
  order            Order       @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([email])
  @@index([createdAt])
  @@map("inboxes")
}

model Domain {
  id            String       @id @default(cuid())
  orderId       String       @map("order_id")
  domain        String       @unique
  tags          String[]     @default([])
  inboxCount    Int          @default(0) @map("inbox_count")
  forwardingUrl String       @map("forwarding_url")
  businessName  String?      @map("business_name")
  fulfilledAt   DateTime?    @map("fulfilled_at")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  status        DomainStatus @default(PENDING)
  order         Order        @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([domain])
  @@index([createdAt])
  @@map("domains")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String   @map("actor_user_id")
  action      String
  details     Json
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

model PendingOrderInvite {
  id        String   @id @default(cuid())
  email     String
  orderId   String   @map("order_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([email, orderId])
  @@index([email])
  @@map("pending_order_invites")
}

model billing_events {
  id          String   @id
  order_id    String
  event_type  String
  amount      Int?
  description String?
  metadata    Json?
  created_at  DateTime @default(now())
  orders      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model notifications {
  id            String   @id
  order_id      String?
  clerk_user_id String
  type          String
  title         String
  message       String
  action_url    String?
  is_read       Boolean  @default(false)
  created_at    DateTime @default(now())
  orders        Order?   @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([clerk_user_id])
  @@index([is_read])
}

enum ProductType {
  RESELLER
  EDU
  LEGACY
  PREWARMED
  AWS
  MICROSOFT
}

enum OrderStatus {
  PENDING
  FULFILLED
  CANCELLED
  PAID
  PENDING_DOMAIN_PURCHASE
}

enum InboxStatus {
  PENDING
  LIVE
  DELETED
  CANCELLED
}

enum DomainStatus {
  PENDING
  LIVE
  DELETED
  DECOMMISSIONED
  CANCELLED
}
